name: Feature Branch Workflow (NO PR)

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Enter the branch name without the "feature/" prefix'
        required: true
      action:
        description: 'Choose an action: start, finish, or resume'
        required: true
        default: 'start'
        type: choice
        options:
          - start
          - finish
          - resume

jobs:
  start_job:
    if: ${{ github.event.inputs.action == 'start' }}
    runs-on: ubuntu-24.04

    permissions:
      contents: write

    steps:
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Set up variables
        run: |
          echo "BRANCH_NAME=feature/${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
          echo "Set BRANCH_NAME to feature/${{ github.event.inputs.branch_name }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create or switch to branch
        run: |
          if git ls-remote --exit-code --heads origin "${{ env.BRANCH_NAME }}"; then
            git checkout "${{ env.BRANCH_NAME }}"
            echo "Checked out existing branch ${{ env.BRANCH_NAME }}"
          else
            git checkout -b "${{ env.BRANCH_NAME }}"
            echo "Created and checked out new branch ${{ env.BRANCH_NAME }}"
          fi

      - name: Modify Maven coordinate
        run: |

          # Extract the current version from pom.xml
          ORIGINAL_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Original version: $ORIGINAL_VERSION"

          # Append '-feature-branch_name' to the version
          NEW_VERSION="${ORIGINAL_VERSION}-feature-${{ github.event.inputs.branch_name }}"
          echo "New version: $NEW_VERSION"

          # Update the version in pom.xml
          mvn versions:set -DnewVersion="$NEW_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true

      - name: Commit and push changes
        run: |
          git add '**/pom.xml'
          git commit -m "[START] Update Maven coordinate for ${{ env.BRANCH_NAME }}"
          git push origin "${{ env.BRANCH_NAME }}"

  finish_job:
    if: ${{ github.event.inputs.action == 'finish' }}
    runs-on: ubuntu-24.04

    permissions:
      contents: write

    steps:
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Set up variables
        run: |
          echo "BRANCH_NAME=feature/${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
          echo "Set BRANCH_NAME to feature/${{ github.event.inputs.branch_name }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Checkout feature branch
        run: |
          git checkout "${{ env.BRANCH_NAME }}"
          echo "Checked out branch ${{ env.BRANCH_NAME }}"

      - name: Verify branch
        run: |
          git branch
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"

      - name: Modify Maven coordinate
        run: |
  
          # Extract the current version from pom.xml
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"

          # Remove '-feature-branch_name' from the version
          NEW_VERSION=$(echo "$CURRENT_VERSION" | sed "s/-feature-${{ github.event.inputs.branch_name }}//")
          echo "Reverted version: $NEW_VERSION"
  
          # Update the version in pom.xml without changing the parent version
          mvn versions:set -DnewVersion="$NEW_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true

      - name: Commit and push changes
        run: |
          git add '**/pom.xml'
          git commit -m "[FINISH] Revert Maven coordinate for ${{ env.BRANCH_NAME }}"
          git push origin "${{ env.BRANCH_NAME }}"

  resume_job:
    if: ${{ github.event.inputs.action == 'resume' }}
    runs-on: ubuntu-24.04
  
    permissions:
      contents: write
  
    steps:
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
  
      - name: Set up variables
        run: |
          echo "BRANCH_NAME=feature/${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
          echo "Set BRANCH_NAME to feature/${{ github.event.inputs.branch_name }}"
  
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
  
      - name: Checkout feature branch
        run: |
          git checkout "${{ env.BRANCH_NAME }}"

      - name: Modify Maven coordinate
        run: |
          # Ensure we're on the correct branch
          git checkout "${{ env.BRANCH_NAME }}"

          # Extract the current version from pom.xml
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"

          # Check if version already includes '-feature-branch_name'
          if [[ "$CURRENT_VERSION" != *"-feature-${{ github.event.inputs.branch_name }}" ]]; then
            # Append '-feature-branch_name' to the version
            NEW_VERSION="${CURRENT_VERSION}-feature-${{ github.event.inputs.branch_name }}"
            echo "New version: $NEW_VERSION"

            # Update the version in pom.xml
            mvn versions:set -DnewVersion="$NEW_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true

            # Set output to indicate that version was changed
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version already includes '-feature-${{ github.event.inputs.branch_name }}'"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        run: |
          git add '**/pom.xml'
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit"
          else
            git commit -m "[RESUME] Update Maven coordinate for ${{ env.BRANCH_NAME }}"
            git push origin "${{ env.BRANCH_NAME }}"
          fi
