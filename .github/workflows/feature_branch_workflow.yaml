name: Feature Branch Workflow

run-name: "Feature Branch CI -- ${{github.event.inputs.action}} Action - feature/${{github.event.inputs.feature_branch}} "

# Trigger workflow manually using the UI button
on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: Action
        options:
          - Start
          - Resume
          - Finish
        required: true

      feature_branch:
        type: string
        description: Enter Branch Name (Without feature/ prefix)
        required: true
        
env:
  TRUNK_BRANCH: main
  FEATURE_BRANCH: feature/${{github.event.inputs.feature_branch}}

# Define jobs within the workflow
jobs:
  check_if_pr_exist:
    runs-on: ubuntu-latest
    name: Check If PR Exist For Branch
    if: github.event.inputs.feature_branch != ''
    outputs:
        prExists: ${{steps.getPRList.outputs.pr_exists}}
        prURL: ${{steps.getPRList.outputs.pr_url}}
        prNumber: ${{steps.getPRList.outputs.pr_number}}
        prHTMLURL: ${{steps.getPRList.outputs.pr_html_url}}
    steps:
      - name: Get Pull Request
        id: getPRList
        uses: OmOmofonmwan/get-pr-number-based-off-branch-name@main
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          repository: ikmdev/${{github.event.repository.name}}
          branch_name: ${{env.FEATURE_BRANCH}}
  
  start_action:
    runs-on: ubuntu-latest
    name: Start Action
    needs: check_if_pr_exist
    if: github.event.inputs.action == 'Start' 

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: If PR Exist
        if: needs.check_if_pr_exist.outputs.prExists == 'true'
        run: |
          echo "ERROR: Pull Request Already Exists For ${{env.FEATURE_BRANCH}}"
          exit 1

      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Get Current Version
        run: |
          echo "POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Print Version
        run: echo "Current Version - ${{env.POM_VERSION}}"

      - name: Split version code
        uses: xom9ikk/split@v1.1
        id: splitVersion
        with:
          string: ${{env.POM_VERSION}}
          separator: -SNAPSHOT
          limit: -1

      - name: Set New Unique Version
        run: echo "uniqueVersion=${{steps.splitVersion.outputs._0}}-${{github.event.inputs.feature_branch}}-SNAPSHOT" >> $GITHUB_ENV

      # The GitHub Actions workflow will automatically use the existing  global user.name configuration set on the developer's machine for any Git operations within the workflow. No additional configuration is needed in the workflow YAML file.
      - name: Commit & Push
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git pull -p
          git checkout -b $FEATURE_BRANCH
          mvn versions:set -DnewVersion=${{env.uniqueVersion}} -DgenerateBackupPoms=false
          git commit -am "Draft: Update feature version to ${{env.uniqueVersion}}"
          git pull origin main
          git push -u origin $FEATURE_BRANCH

      - name: Create PR CLI
        run: gh pr create --base ${{env.TRUNK_BRANCH}} --head "${{github.event.repository.owner}}:${{env.FEATURE_BRANCH}}" --repo ikmdev/${{github.event.repository.name}}

      # - name: Create PR 
      #   run: |
      #     curl -L \
      #         -X POST \
      #         -H "Accept: application/vnd.github.v3+json" \
      #         -H "X-GitHub-Api-Version: 2022-11-28" \
      #         -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
      #        https://api.github.com/repos/ikmdev/${{github.event.repository.name}}/pulls \
      #     -d '{"title":"Draft - ${{env.FEATURE_BRANCH}}","body":"Currently In Progress: ${{env.FEATURE_BRANCH}}","head":"${{env.TRUNK_BRANCH}}","base":"${{github.event.repository.owner}}:${{env.FEATURE_BRANCH}}", "maintainer_can_modify": false, "draft": true}'

  resume_action:
    runs-on: ubuntu-latest
    name: Resume Action
    if: github.event.inputs.action == 'Resume'
    needs: check_if_pr_exist
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: If PR Does Not Exist
        if:  needs.check_if_pr_exist.outputs.prExists == 'false'
        run: |
          echo "ERROR: Pull Request Does Not Exist For ${{env.FEATURE_BRANCH}}"
          exit 1

      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Get Current Version
        run: |
          echo "POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Print Version
        run: echo ${{env.POM_VERSION}}

      - name: Split version code
        uses: xom9ikk/split@v1.1
        id: splitVersion
        with:
          string: ${{env.POM_VERSION}}
          separator: -SNAPSHOT
          limit: -1

      - name: Revert to Unique Version
        run: echo "uniqueVersion=${{steps.splitVersion.outputs._0}}-${{github.event.inputs.feature_branch}}-SNAPSHOT" >> $GITHUB_ENV

      - name: Commit & Push
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git config --get remote.origin.fetch
          git checkout $TRUNK_BRANCH
          git pull -p
          git checkout $FEATURE_BRANCH
          mvn versions:set -DnewVersion=${{env.uniqueVersion}} -DgenerateBackupPoms=false
          git commit -am "Draft: Update feature version to ${{env.uniqueVersion}}"
          git pull --all
          git push origin $FEATURE_BRANCH

      - name: Update PR To Draft
        run: |
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{secrets.TOKEN_1}}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${{needs.check_if_pr_exist.outputs.prURL}} \
            -d '{"title":"Draft - ${{env.FEATURE_BRANCH}}","body":"Currently Work In Progress - ${{env.FEATURE_BRANCH}}","state":"open", "maintainer_can_modify": false, "draft": true}'
    
      - name: Set PR To Draft
        run: |
          gh extension install kyanny/gh-pr-draft
          gh pr ready --undo ${{needs.check_if_pr_exist.outputs.prHTMLURL}}
        env:
         GITHUB_TOKEN: ${{secrets.TOKEN_1}}

  finish_action:
    runs-on: ubuntu-latest
    name: Finish Action
    if: github.event.inputs.action == 'Finish'
    needs: check_if_pr_exist
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: If PR Does Not Exist
        if: needs.check_if_pr_exist.outputs.prExists == 'false'
        run: |
          echo "ERROR: Pull Request Does Not Exist For ${{env.FEATURE_BRANCH}}"
          exit 1
          
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Get Current Version
        run: |
          echo "POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Print Version
        run: echo "Current Version - ${{env.POM_VERSION}}"

      - name: Split version code
        uses: xom9ikk/split@v1.1
        id: splitVersion
        with:
          string: ${{env.POM_VERSION}}
          separator: "-"
          limit: -1

      - name: Set SNAPSHOT Version
        run: echo "snapshotVersion=${{steps.splitVersion.outputs._0}}-SNAPSHOT" >> $GITHUB_ENV

      - name: Commit & Push
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git checkout $TRUNK_BRANCH
          git pull -p
          git checkout $FEATURE_BRANCH
          mvn versions:set -DnewVersion=$snapshotVersion -DgenerateBackupPoms=false
          git commit -am "Branch Ready For Review - Reverted back to original snapshot version $snapshotVersion"
          git push origin $FEATURE_BRANCH

      - name: Update PR To Ready For Review
        run: |
            curl -L \
             -X PATCH \
             -H "Accept: application/vnd.github+json" \
             -H "Authorization: Bearer ${{secrets.TOKEN_1}}" \
             -H "X-GitHub-Api-Version: 2022-11-28" \
             ${{needs.check_if_pr_exist.outputs.prURL}} \
             -d '{"title":"Ready For Review - ${{env.FEATURE_BRANCH}}","body":"Ready For Review - ${{env.FEATURE_BRANCH}}","state":"open", "maintainer_can_modify": false, "draft": false}'

      - name: Set PR To Ready
        if: needs.check_if_pr_exist.outputs.prExists == 'true'
        run: gh pr ready ${{needs.check_if_pr_exist.outputs.prHTMLURL}}
        env:
          GITHUB_TOKEN: ${{secrets.TOKEN_1}}
  